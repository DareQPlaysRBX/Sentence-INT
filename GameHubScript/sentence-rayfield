--[[
    Nebula UI Library
    Advanced Roblox GUI Framework
    Version: 1.0.0
    
    Usage:
    local NebulaUI = loadstring(game:HttpGet("YOUR_RAW_URL"))()
]]

local NebulaUI = {}
NebulaUI.__index = NebulaUI

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Get proper parent
local function GetGui()
    if RunService:IsStudio() then
        return Player:WaitForChild("PlayerGui")
    else
        return CoreGui
    end
end

-- Theme System
NebulaUI.Themes = {
    Dark = {
        Background = Color3.fromRGB(20, 20, 25),
        SecondaryBackground = Color3.fromRGB(25, 25, 30),
        TertiaryBackground = Color3.fromRGB(30, 30, 35),
        Accent = Color3.fromRGB(88, 101, 242),
        SecondaryAccent = Color3.fromRGB(71, 82, 196),
        Text = Color3.fromRGB(240, 240, 240),
        SecondaryText = Color3.fromRGB(180, 180, 180),
        Border = Color3.fromRGB(45, 45, 50),
        Success = Color3.fromRGB(67, 181, 129),
        Error = Color3.fromRGB(240, 71, 71),
        Warning = Color3.fromRGB(250, 166, 26)
    },
    Light = {
        Background = Color3.fromRGB(250, 250, 250),
        SecondaryBackground = Color3.fromRGB(240, 240, 240),
        TertiaryBackground = Color3.fromRGB(230, 230, 230),
        Accent = Color3.fromRGB(79, 70, 229),
        SecondaryAccent = Color3.fromRGB(99, 102, 241),
        Text = Color3.fromRGB(20, 20, 20),
        SecondaryText = Color3.fromRGB(100, 100, 100),
        Border = Color3.fromRGB(200, 200, 200),
        Success = Color3.fromRGB(34, 197, 94),
        Error = Color3.fromRGB(239, 68, 68),
        Warning = Color3.fromRGB(245, 158, 11)
    },
    Midnight = {
        Background = Color3.fromRGB(10, 10, 20),
        SecondaryBackground = Color3.fromRGB(15, 15, 30),
        TertiaryBackground = Color3.fromRGB(20, 20, 40),
        Accent = Color3.fromRGB(139, 92, 246),
        SecondaryAccent = Color3.fromRGB(109, 40, 217),
        Text = Color3.fromRGB(230, 230, 230),
        SecondaryText = Color3.fromRGB(170, 170, 170),
        Border = Color3.fromRGB(50, 40, 80),
        Success = Color3.fromRGB(16, 185, 129),
        Error = Color3.fromRGB(239, 68, 68),
        Warning = Color3.fromRGB(251, 191, 36)
    }
}

local CurrentTheme = NebulaUI.Themes.Dark

-- Utility Functions
local function Create(class, properties)
    local obj = Instance.new(class)
    for i, v in pairs(properties or {}) do
        obj[i] = v
    end
    return obj
end

local function MakeDraggable(frame, handle)
    handle = handle or frame
    local dragging, dragInput, dragStart, startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Create Window
function NebulaUI:CreateWindow(config)
    config = config or {}
    local Window = {}
    
    -- Create ScreenGui
    local ScreenGui = Create("ScreenGui", {
        Name = "NebulaUI",
        Parent = GetGui(),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Main Frame
    local MainFrame = Create("Frame", {
        Name = "MainFrame",
        Parent = ScreenGui,
        BackgroundColor3 = CurrentTheme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -275, 0.5, -200),
        Size = UDim2.new(0, 550, 0, 400),
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = MainFrame
    })
    
    Create("UIStroke", {
        Color = CurrentTheme.Border,
        Thickness = 1,
        Parent = MainFrame
    })
    
    -- Top Bar
    local TopBar = Create("Frame", {
        Name = "TopBar",
        Parent = MainFrame,
        BackgroundColor3 = CurrentTheme.SecondaryBackground,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 45)
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = TopBar
    })
    
    local TopBarFix = Create("Frame", {
        Parent = TopBar,
        BackgroundColor3 = CurrentTheme.SecondaryBackground,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(1, 0, 0.5, 0)
    })
    
    local Title = Create("TextLabel", {
        Name = "Title",
        Parent = TopBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = config.Name or "Nebula UI",
        TextColor3 = CurrentTheme.Text,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Close Button
    local CloseButton = Create("TextButton", {
        Name = "CloseButton",
        Parent = TopBar,
        BackgroundColor3 = CurrentTheme.Error,
        BackgroundTransparency = 0.5,
        Position = UDim2.new(1, -35, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = "×",
        TextColor3 = CurrentTheme.Text,
        TextSize = 18,
        AutoButtonColor = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = CloseButton
    })
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    CloseButton.MouseEnter:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play()
    end)
    
    CloseButton.MouseLeave:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.5}):Play()
    end)
    
    -- Minimize Button
    local MinimizeButton = Create("TextButton", {
        Name = "MinimizeButton",
        Parent = TopBar,
        BackgroundColor3 = CurrentTheme.Warning,
        BackgroundTransparency = 0.5,
        Position = UDim2.new(1, -60, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = "—",
        TextColor3 = CurrentTheme.Text,
        TextSize = 14,
        AutoButtonColor = false
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = MinimizeButton
    })
    
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            MainFrame:TweenSize(UDim2.new(0, 550, 0, 45), "Out", "Quad", 0.3, true)
        else
            MainFrame:TweenSize(UDim2.new(0, 550, 0, 400), "Out", "Quad", 0.3, true)
        end
    end)
    
    MinimizeButton.MouseEnter:Connect(function()
        TweenService:Create(MinimizeButton, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play()
    end)
    
    MinimizeButton.MouseLeave:Connect(function()
        TweenService:Create(MinimizeButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.5}):Play()
    end)
    
    -- Tab Container
    local TabContainer = Create("Frame", {
        Name = "TabContainer",
        Parent = MainFrame,
        BackgroundColor3 = CurrentTheme.SecondaryBackground,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 10, 0, 55),
        Size = UDim2.new(0, 130, 1, -65)
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = TabContainer
    })
    
    local TabList = Create("ScrollingFrame", {
        Name = "TabList",
        Parent = TabContainer,
        Active = true,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0, 5),
        Size = UDim2.new(1, -10, 1, -10),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = CurrentTheme.Accent,
        CanvasSize = UDim2.new(0, 0, 0, 0)
    })
    
    Create("UIListLayout", {
        Parent = TabList,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    -- Content Container
    local ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 150, 0, 55),
        Size = UDim2.new(1, -160, 1, -65)
    })
    
    MakeDraggable(MainFrame, TopBar)
    
    local Tabs = {}
    local CurrentTab = nil
    
    -- Create Tab Function
    function Window:CreateTab(tabConfig)
        tabConfig = tabConfig or {}
        local Tab = {}
        
        local TabButton = Create("TextButton", {
            Name = tabConfig.Name or "Tab",
            Parent = TabList,
            BackgroundColor3 = CurrentTheme.TertiaryBackground,
            BackgroundTransparency = 0.5,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 35),
            Font = Enum.Font.Gotham,
            Text = tabConfig.Name or "Tab",
            TextColor3 = CurrentTheme.SecondaryText,
            TextSize = 14,
            AutoButtonColor = false
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = TabButton
        })
        
        local TabContent = Create("ScrollingFrame", {
            Name = tabConfig.Name or "Tab",
            Parent = ContentContainer,
            Active = true,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, 0, 1, 0),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = CurrentTheme.Accent,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false
        })
        
        Create("UIListLayout", {
            Parent = TabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8)
        })
        
        Create("UIPadding", {
            Parent = TabContent,
            PaddingLeft = UDim.new(0, 5),
            PaddingRight = UDim.new(0, 5),
            PaddingTop = UDim.new(0, 5),
            PaddingBottom = UDim.new(0, 5)
        })
        
        -- Update canvas size
        local function UpdateCanvas()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, TabContent.UIListLayout.AbsoluteContentSize.Y + 10)
        end
        
        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(Tabs) do
                tab.Button.BackgroundTransparency = 0.5
                tab.Button.TextColor3 = CurrentTheme.SecondaryText
                tab.Content.Visible = false
            end
            
            TabButton.BackgroundTransparency = 0
            TabButton.TextColor3 = CurrentTheme.Text
            TabContent.Visible = true
            CurrentTab = Tab
        end)
        
        TabButton.MouseEnter:Connect(function()
            if CurrentTab ~= Tab then
                TweenService:Create(TabButton, TweenInfo.new(0.2), {
                    BackgroundTransparency = 0.3
                }):Play()
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if CurrentTab ~= Tab then
                TweenService:Create(TabButton, TweenInfo.new(0.2), {
                    BackgroundTransparency = 0.5
                }):Play()
            end
        end)
        
        Tab.Button = TabButton
        Tab.Content = TabContent
        table.insert(Tabs, Tab)
        
        -- Auto select first tab
        if #Tabs == 1 then
            TabButton.MouseButton1Click:Fire()
        end
        
        -- Update tab list canvas
        TabList.CanvasSize = UDim2.new(0, 0, 0, TabList.UIListLayout.AbsoluteContentSize.Y)
        
        -- Tab Elements
        
        function Tab:CreateButton(buttonConfig)
            buttonConfig = buttonConfig or {}
            
            local Button = Create("TextButton", {
                Name = buttonConfig.Name or "Button",
                Parent = TabContent,
                BackgroundColor3 = CurrentTheme.TertiaryBackground,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 40),
                Font = Enum.Font.Gotham,
                Text = buttonConfig.Name or "Button",
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                AutoButtonColor = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = Button
            })
            
            Create("UIStroke", {
                Color = CurrentTheme.Border,
                Thickness = 1,
                Transparency = 0.5,
                Parent = Button
            })
            
            Button.MouseButton1Click:Connect(function()
                -- Click animation
                local Circle = Create("Frame", {
                    Parent = Button,
                    BackgroundColor3 = CurrentTheme.Accent,
                    BackgroundTransparency = 0.7,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Size = UDim2.new(0, 0, 0, 0)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = Circle
                })
                
                Circle:TweenSize(UDim2.new(2, 0, 2, 0), "Out", "Quad", 0.5)
                TweenService:Create(Circle, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
                
                game:GetService("Debris"):AddItem(Circle, 0.5)
                
                if buttonConfig.Callback then
                    buttonConfig.Callback()
                end
            end)
            
            Button.MouseEnter:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.2), {
                    BackgroundColor3 = CurrentTheme.Accent,
                    BackgroundTransparency = 0.8
                }):Play()
            end)
            
            Button.MouseLeave:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.2), {
                    BackgroundColor3 = CurrentTheme.TertiaryBackground,
                    BackgroundTransparency = 0
                }):Play()
            end)
            
            UpdateCanvas()
            return Button
        end
        
        function Tab:CreateToggle(toggleConfig)
            toggleConfig = toggleConfig or {}
            local toggled = toggleConfig.Default or false
            
            local Toggle = Create("Frame", {
                Name = toggleConfig.Name or "Toggle",
                Parent = TabContent,
                BackgroundColor3 = CurrentTheme.TertiaryBackground,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 40)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = Toggle
            })
            
            Create("UIStroke", {
                Color = CurrentTheme.Border,
                Thickness = 1,
                Transparency = 0.5,
                Parent = Toggle
            })
            
            local ToggleLabel = Create("TextLabel", {
                Parent = Toggle,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(0.7, -10, 1, 0),
                Font = Enum.Font.Gotham,
                Text = toggleConfig.Name or "Toggle",
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local ToggleButton = Create("Frame", {
                Parent = Toggle,
                BackgroundColor3 = toggled and CurrentTheme.Success or CurrentTheme.Border,
                Position = UDim2.new(1, -50, 0.5, -10),
                Size = UDim2.new(0, 40, 0, 20)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = ToggleButton
            })
            
            local ToggleCircle = Create("Frame", {
                Parent = ToggleButton,
                BackgroundColor3 = CurrentTheme.Text,
                Position = toggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
                Size = UDim2.new(0, 16, 0, 16)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = ToggleCircle
            })
            
            local ToggleClick = Create("TextButton", {
                Parent = Toggle,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Text = "",
                AutoButtonColor = false
            })
            
            ToggleClick.MouseButton1Click:Connect(function()
                toggled = not toggled
                
                TweenService:Create(ToggleButton, TweenInfo.new(0.2), {
                    BackgroundColor3 = toggled and CurrentTheme.Success or CurrentTheme.Border
                }):Play()
                
                TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {
                    Position = toggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                }):Play()
                
                if toggleConfig.Callback then
                    toggleConfig.Callback(toggled)
                end
            end)
            
            UpdateCanvas()
            return Toggle
        end
        
        function Tab:CreateSlider(sliderConfig)
            sliderConfig = sliderConfig or {}
            local min = sliderConfig.Min or 0
            local max = sliderConfig.Max or 100
            local default = sliderConfig.Default or min
            local increment = sliderConfig.Increment or 1
            
            local Slider = Create("Frame", {
                Name = sliderConfig.Name or "Slider",
                Parent = TabContent,
                BackgroundColor3 = CurrentTheme.TertiaryBackground,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 60)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = Slider
            })
            
            Create("UIStroke", {
                Color = CurrentTheme.Border,
                Thickness = 1,
                Transparency = 0.5,
                Parent = Slider
            })
            
            local SliderLabel = Create("TextLabel", {
                Parent = Slider,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 5),
                Size = UDim2.new(0.5, -10, 0, 20),
                Font = Enum.Font.Gotham,
                Text = sliderConfig.Name or "Slider",
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local SliderValue = Create("TextLabel", {
                Parent = Slider,
                BackgroundTransparency = 1,
                Position = UDim2.new(0.5, 0, 0, 5),
                Size = UDim2.new(0.5, -10, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = tostring(default),
                TextColor3 = CurrentTheme.Accent,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Right
            })
            
            local SliderBar = Create("Frame", {
                Parent = Slider,
                BackgroundColor3 = CurrentTheme.Border,
                Position = UDim2.new(0, 10, 0, 35),
                Size = UDim2.new(1, -20, 0, 6)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = SliderBar
            })
            
            local SliderFill = Create("Frame", {
                Parent = SliderBar,
                BackgroundColor3 = CurrentTheme.Accent,
                Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = SliderFill
            })
            
            local SliderButton = Create("TextButton", {
                Parent = SliderBar,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Text = "",
                AutoButtonColor = false
            })
            
            local dragging = false
            
            local function UpdateSlider(input)
                local pos = UDim2.new(math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1), 0, 1, 0)
                SliderFill.Size = pos
                
                local value = math.floor(((pos.X.Scale * (max - min)) + min) / increment) * increment
                SliderValue.Text = tostring(value)
                
                if sliderConfig.Callback then
                    sliderConfig.Callback(value)
                end
            end
            
            SliderButton.MouseButton1Down:Connect(function()
                dragging = true
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    UpdateSlider(input)
                end
            end)
            
            UpdateCanvas()
            return Slider
        end
        
        function Tab:CreateTextbox(textboxConfig)
            textboxConfig = textboxConfig or {}
            
            local Textbox = Create("Frame", {
                Name = textboxConfig.Name or "Textbox",
                Parent = TabContent,
                BackgroundColor3 = CurrentTheme.TertiaryBackground,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 40)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = Textbox
            })
            
            Create("UIStroke", {
                Color = CurrentTheme.Border,
                Thickness = 1,
                Transparency = 0.5,
                Parent = Textbox
            })
            
            local TextboxLabel = Create("TextLabel", {
                Parent = Textbox,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(0.4, -10, 1, 0),
                Font = Enum.Font.Gotham,
                Text = textboxConfig.Name or "Textbox",
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local TextboxInput = Create("TextBox", {
                Parent = Textbox,
                BackgroundColor3 = CurrentTheme.Background,
                Position = UDim2.new(0.4, 5, 0.5, -12),
                Size = UDim2.new(0.6, -15, 0, 24),
                Font = Enum.Font.Gotham,
                PlaceholderText = textboxConfig.Placeholder or "Enter text...",
                Text = textboxConfig.Default or "",
                TextColor3 = CurrentTheme.Text,
                PlaceholderColor3 = CurrentTheme.SecondaryText,
                TextSize = 13,
                ClearTextOnFocus = false
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = TextboxInput
            })
            
            TextboxInput.FocusLost:Connect(function(enterPressed)
                if textboxConfig.Callback then
                    textboxConfig.Callback(TextboxInput.Text)
                end
            end)
            
            UpdateCanvas()
            return Textbox
        end
        
        function Tab:CreateLabel(text)
            local Label = Create("TextLabel", {
                Parent = TabContent,
                BackgroundColor3 = CurrentTheme.TertiaryBackground,
                BackgroundTransparency = 0.7,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 30),
                Font = Enum.Font.Gotham,
                Text = text or "Label",
                TextColor3 = CurrentTheme.SecondaryText,
                TextSize = 13
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = Label
            })
            
            UpdateCanvas()
            return Label
        end
        
        function Tab:CreateSection(text)
            local Section = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = CurrentTheme.Accent,
                BackgroundTransparency = 0.9,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 25)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = Section
            })
            
            local SectionLabel = Create("TextLabel", {
                Parent = Section,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 8, 0, 0),
                Size = UDim2.new(1, -16, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = text or "Section",
                TextColor3 = CurrentTheme.Accent,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            UpdateCanvas()
            return Section
        end
        
        return Tab
    end
    
    function Window:Notify(notifyConfig)
        notifyConfig = notifyConfig or {}
        
        spawn(function()
            local NotificationGui = ScreenGui:FindFirstChild("Notifications") or Create("Frame", {
                Name = "Notifications",
                Parent = ScreenGui,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -320, 1, -30),
                Size = UDim2.new(0, 300, 0, 500),
                ZIndex = 100
            })
            
            local Notification = Create("Frame", {
                Parent = NotificationGui,
                BackgroundColor3 = CurrentTheme.SecondaryBackground,
                BorderSizePixel = 0,
                Position = UDim2.new(1, 100, 0, 0),
                Size = UDim2.new(1, 0, 0, 80)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Notification
            })
            
            Create("UIStroke", {
                Color = notifyConfig.Type == "Error" and CurrentTheme.Error or 
                       notifyConfig.Type == "Success" and CurrentTheme.Success or 
                       notifyConfig.Type == "Warning" and CurrentTheme.Warning or 
                       CurrentTheme.Accent,
                Thickness = 2,
                Parent = Notification
            })
            
            local NotificationTitle = Create("TextLabel", {
                Parent = Notification,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 10),
                Size = UDim2.new(1, -20, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = notifyConfig.Title or "Notification",
                TextColor3 = CurrentTheme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local NotificationContent = Create("TextLabel", {
                Parent = Notification,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 35),
                Size = UDim2.new(1, -20, 0, 35),
                Font = Enum.Font.Gotham,
                Text = notifyConfig.Content or "Notification content",
                TextColor3 = CurrentTheme.SecondaryText,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true
            })
            
            Notification:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.3, true)
            
            wait(notifyConfig.Duration or 3)
            
            Notification:TweenPosition(UDim2.new(1, 100, 0, 0), "Out", "Quad", 0.3, true)
            wait(0.3)
            Notification:Destroy()
        end)
    end
    
    function Window:SetTheme(themeName)
        if NebulaUI.Themes[themeName] then
            CurrentTheme = NebulaUI.Themes[themeName]
            -- Update UI colors here
        end
    end
    
    return Window
end

return NebulaUI
