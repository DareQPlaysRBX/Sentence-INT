--[[
    Sentence Rayfield Interface Suite
    Professional Recreation of Original Rayfield Design
    Enhanced with modern improvements while maintaining original aesthetics
    
    Version: 2.0.0
    Based on: Rayfield Interface Suite
]]

local SentenceRayfield = {}
SentenceRayfield.Flags = {}

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Theme (Faithful to Original Rayfield)
local Theme = {
    -- Main Colors
    TextColor = Color3.fromRGB(240, 240, 240),
    Background = Color3.fromRGB(25, 25, 25),
    Topbar = Color3.fromRGB(34, 34, 34),
    Shadow = Color3.fromRGB(20, 20, 20),
    
    -- Tab Colors
    TabBackground = Color3.fromRGB(80, 80, 80),
    TabStroke = Color3.fromRGB(85, 85, 85),
    TabBackgroundSelected = Color3.fromRGB(210, 210, 210),
    TabTextColor = Color3.fromRGB(240, 240, 240),
    SelectedTabTextColor = Color3.fromRGB(50, 50, 50),
    
    -- Element Colors
    ElementBackground = Color3.fromRGB(35, 35, 35),
    ElementBackgroundHover = Color3.fromRGB(40, 40, 40),
    ElementStroke = Color3.fromRGB(50, 50, 50),
    SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
    SecondaryElementStroke = Color3.fromRGB(40, 40, 40),
    
    -- Interactive Elements
    SliderBackground = Color3.fromRGB(50, 138, 220),
    SliderProgress = Color3.fromRGB(50, 138, 220),
    SliderStroke = Color3.fromRGB(58, 163, 255),
    
    ToggleBackground = Color3.fromRGB(30, 30, 30),
    ToggleEnabled = Color3.fromRGB(0, 146, 214),
    ToggleDisabled = Color3.fromRGB(100, 100, 100),
    ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
    ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
    
    InputBackground = Color3.fromRGB(30, 30, 30),
    InputStroke = Color3.fromRGB(65, 65, 65),
    PlaceholderColor = Color3.fromRGB(178, 178, 178),
    
    DropdownSelected = Color3.fromRGB(40, 40, 40),
    DropdownUnselected = Color3.fromRGB(30, 30, 30)
}

-- Create ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "SentenceRayfield"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

if gethui then
    ScreenGui.Parent = gethui()
elseif syn and syn.protect_gui then 
    syn.protect_gui(ScreenGui)
    ScreenGui.Parent = CoreGui
else
    ScreenGui.Parent = CoreGui
end

-- Utility Functions
local function CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties or {}) do
        instance[property] = value
    end
    return instance
end

local function CreateCorner(parent, radius)
    return CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, radius or 4),
        Parent = parent
    })
end

local function CreateStroke(parent, color, thickness, transparency)
    return CreateInstance("UIStroke", {
        Color = color or Theme.ElementStroke,
        Thickness = thickness or 1,
        Transparency = transparency or 0,
        Parent = parent
    })
end

local function CreatePadding(parent, all)
    return CreateInstance("UIPadding", {
        PaddingTop = UDim.new(0, all or 8),
        PaddingBottom = UDim.new(0, all or 8),
        PaddingLeft = UDim.new(0, all or 8),
        PaddingRight = UDim.new(0, all or 8),
        Parent = parent
    })
end

local function CreateListLayout(parent, padding)
    return CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, padding or 5),
        Parent = parent
    })
end

local function TweenObject(object, info, properties, callback)
    local tween = TweenService:Create(object, info, properties)
    if callback then
        tween.Completed:Connect(callback)
    end
    tween:Play()
    return tween
end

-- Main Frame
local Main = CreateInstance("Frame", {
    Name = "Main",
    Size = UDim2.new(0, 500, 0, 475),
    Position = UDim2.new(0.5, -250, 0.5, -237),
    BackgroundColor3 = Theme.Background,
    BorderSizePixel = 0,
    ClipsDescendants = true,
    Parent = ScreenGui
})

CreateCorner(Main, 6)

-- Shadow
local Shadow = CreateInstance("ImageLabel", {
    Name = "Shadow",
    Size = UDim2.new(1, 47, 1, 47),
    Position = UDim2.new(0, -23, 0, -23),
    BackgroundTransparency = 1,
    Image = "rbxassetid://6014261993",
    ImageColor3 = Theme.Shadow,
    ImageTransparency = 0.4,
    ZIndex = 0,
    Parent = Main
})

-- Topbar
local Topbar = CreateInstance("Frame", {
    Name = "Topbar",
    Size = UDim2.new(0, 500, 0, 45),
    Position = UDim2.new(0, 0, 0, 0),
    BackgroundColor3 = Theme.Topbar,
    BorderSizePixel = 0,
    Parent = Main
})

CreateCorner(Topbar, 6)
CreateStroke(Topbar, Theme.ElementStroke, 1, 0)

-- Corner repair for topbar
local CornerRepair = CreateInstance("Frame", {
    Name = "CornerRepair",
    Size = UDim2.new(1, 0, 0, 6),
    Position = UDim2.new(0, 0, 1, -6),
    BackgroundColor3 = Theme.Topbar,
    BorderSizePixel = 0,
    Parent = Topbar
})

-- Divider
local Divider = CreateInstance("Frame", {
    Name = "Divider",
    Size = UDim2.new(1, -10, 0, 1),
    Position = UDim2.new(0, 5, 1, -1),
    BackgroundColor3 = Theme.ElementStroke,
    BorderSizePixel = 0,
    Parent = Topbar
})

-- Title
local Title = CreateInstance("TextLabel", {
    Name = "Title",
    Size = UDim2.new(1, -100, 1, 0),
    Position = UDim2.new(0, 15, 0, 0),
    BackgroundTransparency = 1,
    Text = "Sentence Rayfield",
    TextColor3 = Theme.TextColor,
    TextSize = 16,
    TextXAlignment = Enum.TextXAlignment.Left,
    Font = Enum.Font.Gotham,
    Parent = Topbar
})

-- Hide Button
local HideButton = CreateInstance("ImageButton", {
    Name = "Hide",
    Size = UDim2.new(0, 20, 0, 20),
    Position = UDim2.new(1, -25, 0.5, -10),
    BackgroundTransparency = 1,
    Image = "rbxassetid://10734898355",
    ImageColor3 = Theme.TextColor,
    ImageTransparency = 0.8,
    Parent = Topbar
})

-- Minimize Button
local MinimizeButton = CreateInstance("ImageButton", {
    Name = "ChangeSize",
    Size = UDim2.new(0, 20, 0, 20),
    Position = UDim2.new(1, -50, 0.5, -10),
    BackgroundTransparency = 1,
    Image = "rbxassetid://11036884234",
    ImageColor3 = Theme.TextColor,
    ImageTransparency = 0.8,
    Parent = Topbar
})

-- Search Button
local SearchButton = CreateInstance("ImageButton", {
    Name = "Search",
    Size = UDim2.new(0, 20, 0, 20),
    Position = UDim2.new(1, -75, 0.5, -10),
    BackgroundTransparency = 1,
    Image = "rbxassetid://8553824171",
    ImageColor3 = Theme.TextColor,
    ImageTransparency = 0.8,
    Parent = Topbar
})

-- Tab List (Left Sidebar)
local TabList = CreateInstance("Frame", {
    Name = "TabList",
    Size = UDim2.new(0, 155, 1, -45),
    Position = UDim2.new(0, 0, 0, 45),
    BackgroundTransparency = 1,
    Parent = Main
})

CreateListLayout(TabList, 5)
CreatePadding(TabList, 8)

-- Elements Container (Right Side)
local Elements = CreateInstance("Frame", {
    Name = "Elements",
    Size = UDim2.new(1, -155, 1, -45),
    Position = UDim2.new(0, 155, 0, 45),
    BackgroundTransparency = 1,
    Parent = Main
})

local UIPageLayout = CreateInstance("UIPageLayout", {
    Name = "UIPageLayout",
    SortOrder = Enum.SortOrder.LayoutOrder,
    Circular = false,
    EasingDirection = Enum.EasingDirection.InOut,
    EasingStyle = Enum.EasingStyle.Quart,
    GamepadInputEnabled = false,
    ScrollWheelInputEnabled = false,
    TouchInputEnabled = false,
    TweenTime = 0.4,
    Parent = Elements
})

-- Search Frame
local SearchFrame = CreateInstance("Frame", {
    Name = "Search",
    Size = UDim2.new(1, -35, 0, 35),
    Position = UDim2.new(0.5, 0, 0, 57),
    BackgroundColor3 = Theme.TextColor,
    BackgroundTransparency = 0.9,
    BorderSizePixel = 0,
    Visible = false,
    Parent = Main
})

CreateCorner(SearchFrame, 6)
CreateStroke(SearchFrame, Theme.SecondaryElementStroke, 1, 0.8)

local SearchInput = CreateInstance("TextBox", {
    Name = "Input",
    Size = UDim2.new(1, -40, 1, 0),
    Position = UDim2.new(0, 35, 0, 0),
    BackgroundTransparency = 1,
    Text = "",
    PlaceholderText = "Search for an option",
    TextColor3 = Theme.TextColor,
    PlaceholderColor3 = Theme.TextColor,
    TextSize = 14,
    Font = Enum.Font.Gotham,
    ClearTextOnFocus = false,
    Parent = SearchFrame
})

local SearchIcon = CreateInstance("ImageLabel", {
    Name = "Search",
    Size = UDim2.new(0, 20, 0, 20),
    Position = UDim2.new(0, 10, 0.5, -10),
    BackgroundTransparency = 1,
    Image = "rbxassetid://8553824171",
    ImageColor3 = Theme.TextColor,
    ImageTransparency = 0.5,
    Parent = SearchFrame
})

-- Notifications Container
local NotificationsContainer = CreateInstance("Frame", {
    Name = "Notifications",
    Size = UDim2.new(0, 310, 1, 0),
    Position = UDim2.new(1, -320, 0, 10),
    BackgroundTransparency = 1,
    Parent = ScreenGui
})

CreateListLayout(NotificationsContainer, 10)

-- Variables
local currentTab = nil
local tabs = {}
local minimized = false
local hidden = false
local searchOpen = false

-- Drag Functionality
local dragging = false
local dragStart = nil
local startPos = nil

Topbar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = Main.Position
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, 
                                 startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

-- Hover Effects
local function AddHoverEffect(button)
    button.MouseEnter:Connect(function()
        TweenObject(button, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            ImageTransparency = 0.5
        })
    end)
    
    button.MouseLeave:Connect(function()
        TweenObject(button, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            ImageTransparency = 0.8
        })
    end)
end

AddHoverEffect(HideButton)
AddHoverEffect(MinimizeButton)
AddHoverEffect(SearchButton)

-- Window Functions
local Window = {}

function Window:Minimize()
    if minimized then
        -- Restore
        minimized = false
        MinimizeButton.Image = "rbxassetid://11036884234"
        
        TweenObject(Main, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
            Size = UDim2.new(0, 500, 0, 475)
        })
        TweenObject(Topbar, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
            Size = UDim2.new(0, 500, 0, 45)
        })
        
        task.wait(0.2)
        TabList.Visible = true
        Elements.Visible = true
    else
        -- Minimize
        minimized = true
        MinimizeButton.Image = "rbxassetid://10137941941"
        
        TabList.Visible = false
        Elements.Visible = false
        
        TweenObject(Main, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
            Size = UDim2.new(0, 495, 0, 45)
        })
        TweenObject(Topbar, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
            Size = UDim2.new(0, 495, 0, 45)
        })
    end
end

function Window:Hide()
    if hidden then return end
    hidden = true
    
    -- Hide animation
    TweenObject(Main, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
        Size = UDim2.new(0, 470, 0, 0),
        BackgroundTransparency = 1
    })
    TweenObject(Topbar, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
        BackgroundTransparency = 1
    })
    TweenObject(Shadow, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
        ImageTransparency = 1
    })
    
    for _, child in ipairs(Topbar:GetChildren()) do
        if child:IsA("TextLabel") or child:IsA("ImageButton") then
            TweenObject(child, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
                TextTransparency = 1,
                ImageTransparency = 1
            })
        end
    end
    
    task.wait(0.5)
    Main.Visible = false
end

function Window:Show()
    if not hidden then return end
    hidden = false
    
    Main.Visible = true
    
    TweenObject(Main, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
        Size = UDim2.new(0, 500, 0, 475),
        BackgroundTransparency = 0
    })
    TweenObject(Topbar, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
        BackgroundTransparency = 0
    })
    TweenObject(Shadow, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
        ImageTransparency = 0.4
    })
    
    for _, child in ipairs(Topbar:GetChildren()) do
        if child:IsA("TextLabel") then
            TweenObject(child, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
                TextTransparency = 0
            })
        elseif child:IsA("ImageButton") then
            TweenObject(child, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
                ImageTransparency = 0.8
            })
        end
    end
end

function Window:Destroy()
    TweenObject(Main, TweenInfo.new(0.5, Enum.EasingStyle.Back), {
        Size = UDim2.new(0, 0, 0, 0)
    }, function()
        ScreenGui:Destroy()
    end)
end

function Window:CreateTab(config)
    local tabName = config.Name or "New Tab"
    local tabIcon = config.Icon or ""
    local tabIconId = tonumber(tabIcon) or 0
    
    -- Tab Button
    local TabButton = CreateInstance("Frame", {
        Name = tabName,
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = Theme.TabBackground,
        BackgroundTransparency = 0.7,
        BorderSizePixel = 0,
        Parent = TabList
    })
    
    CreateCorner(TabButton, 4)
    CreateStroke(TabButton, Theme.TabStroke, 1, 0.5)
    
    local TabIcon = CreateInstance("ImageLabel", {
        Name = "Image",
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(0, 10, 0.5, -10),
        BackgroundTransparency = 1,
        Image = tabIconId > 0 and "rbxassetid://" .. tabIconId or "",
        ImageColor3 = Theme.TabTextColor,
        ImageTransparency = 0.2,
        Parent = TabButton
    })
    
    local TabText = CreateInstance("TextLabel", {
        Name = "Title",
        Size = UDim2.new(1, -40, 1, 0),
        Position = UDim2.new(0, 35, 0, 0),
        BackgroundTransparency = 1,
        Text = tabName,
        TextColor3 = Theme.TabTextColor,
        TextTransparency = 0.2,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.Gotham,
        Parent = TabButton
    })
    
    local TabInteract = CreateInstance("TextButton", {
        Name = "Interact",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = "",
        Parent = TabButton
    })
    
    -- Tab Page
    local TabPage = CreateInstance("ScrollingFrame", {
        Name = tabName,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 0,
        ScrollingDirection = Enum.ScrollingDirection.Y,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        BorderSizePixel = 0,
        Parent = Elements
    })
    
    CreateListLayout(TabPage, 5)
    CreatePadding(TabPage, 8)
    
    -- Auto-resize canvas
    TabPage.ChildAdded:Connect(function()
        local contentSize = TabPage.UIListLayout.AbsoluteContentSize
        TabPage.CanvasSize = UDim2.new(0, 0, 0, contentSize.Y + 20)
    end)
    
    -- Tab Selection Logic
    local function SelectTab()
        -- Deselect all tabs
        for _, tab in pairs(tabs) do
            tab.button.BackgroundTransparency = 0.7
            tab.button.UIStroke.Transparency = 0.5
            tab.icon.ImageTransparency = 0.2
            tab.text.TextTransparency = 0.2
            tab.text.TextColor3 = Theme.TabTextColor
        end
        
        -- Select this tab
        TabButton.BackgroundTransparency = 0
        TabButton.UIStroke.Transparency = 1
        TabIcon.ImageTransparency = 0
        TabText.TextTransparency = 0
        TabText.TextColor3 = Theme.SelectedTabTextColor
        
        -- Switch to this page
        UIPageLayout:JumpToIndex(TabPage.LayoutOrder)
        currentTab = tabName
    end
    
    TabInteract.MouseButton1Click:Connect(SelectTab)
    
    -- Store tab data
    tabs[tabName] = {
        button = TabButton,
        icon = TabIcon,
        text = TabText,
        page = TabPage,
        interact = TabInteract,
        select = SelectTab
    }
    
    -- Select first tab
    if not currentTab then
        SelectTab()
    end
    
    -- Tab Object
    local Tab = {}
    
    function Tab:CreateSection(name)
        local Section = CreateInstance("Frame", {
            Name = "SectionTitle",
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundTransparency = 1,
            Parent = TabPage
        })
        
        local SectionTitle = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = name,
            TextColor3 = Theme.TextColor,
            TextTransparency = 0.4,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.GothamBold,
            Parent = Section
        })
        
        return Section
    end
    
    function Tab:CreateButton(config)
        local Button = CreateInstance("Frame", {
            Name = "Button",
            Size = UDim2.new(1, 0, 0, 40),
            BackgroundColor3 = Theme.ElementBackground,
            BorderSizePixel = 0,
            Parent = TabPage
        })
        
        CreateCorner(Button, 4)
        CreateStroke(Button, Theme.ElementStroke)
        
        local ButtonTitle = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(1, -15, 1, 0),
            Position = UDim2.new(0, 15, 0, 0),
            BackgroundTransparency = 1,
            Text = config.Name or "Button",
            TextColor3 = Theme.TextColor,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.Gotham,
            Parent = Button
        })
        
        local ButtonInteract = CreateInstance("TextButton", {
            Name = "Interact",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = "",
            Parent = Button
        })
        
        -- Hover effect
        ButtonInteract.MouseEnter:Connect(function()
            TweenObject(Button, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                BackgroundColor3 = Theme.ElementBackgroundHover
            })
        end)
        
        ButtonInteract.MouseLeave:Connect(function()
            TweenObject(Button, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                BackgroundColor3 = Theme.ElementBackground
            })
        end)
        
        if config.Callback then
            ButtonInteract.MouseButton1Click:Connect(config.Callback)
        end
        
        return Button
    end
    
    function Tab:CreateToggle(config)
        local Toggle = CreateInstance("Frame", {
            Name = "Toggle",
            Size = UDim2.new(1, 0, 0, 40),
            BackgroundColor3 = Theme.ElementBackground,
            BorderSizePixel = 0,
            Parent = TabPage
        })
        
        CreateCorner(Toggle, 4)
        CreateStroke(Toggle, Theme.ElementStroke)
        
        local ToggleTitle = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(1, -60, 1, 0),
            Position = UDim2.new(0, 15, 0, 0),
            BackgroundTransparency = 1,
            Text = config.Name or "Toggle",
            TextColor3 = Theme.TextColor,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.Gotham,
            Parent = Toggle
        })
        
        local ToggleFrame = CreateInstance("Frame", {
            Name = "ToggleFrame",
            Size = UDim2.new(0, 40, 0, 20),
            Position = UDim2.new(1, -50, 0.5, -10),
            BackgroundColor3 = Theme.ToggleBackground,
            BorderSizePixel = 0,
            Parent = Toggle
        })
        
        CreateCorner(ToggleFrame, 10)
        CreateStroke(ToggleFrame, Theme.ToggleDisabledStroke)
        
        local ToggleCircle = CreateInstance("Frame", {
            Name = "ToggleCircle",
            Size = UDim2.new(0, 16, 0, 16),
            Position = UDim2.new(0, 2, 0.5, -8),
            BackgroundColor3 = Theme.ToggleDisabled,
            BorderSizePixel = 0,
            Parent = ToggleFrame
        })
        
        CreateCorner(ToggleCircle, 8)
        CreateStroke(ToggleCircle, Theme.ToggleDisabledStroke)
        
        local ToggleInteract = CreateInstance("TextButton", {
            Name = "Interact",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = "",
            Parent = ToggleFrame
        })
        
        local toggled = config.CurrentValue or false
        
        local function UpdateToggle()
            if toggled then
                TweenObject(ToggleCircle, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Position = UDim2.new(1, -18, 0.5, -8),
                    BackgroundColor3 = Theme.ToggleEnabled
                })
                TweenObject(ToggleCircle.UIStroke, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Color = Theme.ToggleEnabledStroke
                })
                TweenObject(ToggleFrame.UIStroke, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Color = Theme.ToggleEnabledStroke
                })
            else
                TweenObject(ToggleCircle, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Position = UDim2.new(0, 2, 0.5, -8),
                    BackgroundColor3 = Theme.ToggleDisabled
                })
                TweenObject(ToggleCircle.UIStroke, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Color = Theme.ToggleDisabledStroke
                })
                TweenObject(ToggleFrame.UIStroke, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Color = Theme.ToggleDisabledStroke
                })
            end
            
            if config.Flag then
                SentenceRayfield.Flags[config.Flag] = {CurrentValue = toggled}
            end
            
            if config.Callback then
                config.Callback(toggled)
            end
        end
        
        ToggleInteract.MouseButton1Click:Connect(function()
            toggled = not toggled
            UpdateToggle()
        end)
        
        UpdateToggle()
        
        local ToggleObject = {
            SetValue = function(value)
                toggled = value
                UpdateToggle()
            end
        }
        
        return ToggleObject
    end
    
    function Tab:CreateSlider(config)
        local Slider = CreateInstance("Frame", {
            Name = "Slider",
            Size = UDim2.new(1, 0, 0, 55),
            BackgroundColor3 = Theme.ElementBackground,
            BorderSizePixel = 0,
            Parent = TabPage
        })
        
        CreateCorner(Slider, 4)
        CreateStroke(Slider, Theme.ElementStroke)
        
        local SliderTitle = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(0.7, 0, 0, 20),
            Position = UDim2.new(0, 15, 0, 8),
            BackgroundTransparency = 1,
            Text = config.Name or "Slider",
            TextColor3 = Theme.TextColor,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.Gotham,
            Parent = Slider
        })
        
        local SliderValue = CreateInstance("TextLabel", {
            Name = "Value",
            Size = UDim2.new(0.3, -15, 0, 20),
            Position = UDim2.new(0.7, 0, 0, 8),
            BackgroundTransparency = 1,
            Text = tostring(config.CurrentValue or config.Min or 0),
            TextColor3 = Theme.SliderProgress,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Right,
            Font = Enum.Font.GothamBold,
            Parent = Slider
        })
        
        local SliderTrack = CreateInstance("Frame", {
            Name = "SliderTrack",
            Size = UDim2.new(1, -30, 0, 4),
            Position = UDim2.new(0, 15, 1, -15),
            BackgroundColor3 = Theme.SecondaryElementBackground,
            BorderSizePixel = 0,
            Parent = Slider
        })
        
        CreateCorner(SliderTrack, 2)
        CreateStroke(SliderTrack, Theme.SecondaryElementStroke)
        
        local SliderFill = CreateInstance("Frame", {
            Name = "SliderFill",
            Size = UDim2.new(0, 0, 1, 0),
            BackgroundColor3 = Theme.SliderProgress,
            BorderSizePixel = 0,
            Parent = SliderTrack
        })
        
        CreateCorner(SliderFill, 2)
        
        local SliderButton = CreateInstance("Frame", {
            Name = "SliderButton",
            Size = UDim2.new(0, 12, 0, 12),
            Position = UDim2.new(0, -6, 0.5, -6),
            BackgroundColor3 = Theme.SliderProgress,
            BorderSizePixel = 0,
            Parent = SliderTrack
        })
        
        CreateCorner(SliderButton, 6)
        CreateStroke(SliderButton, Theme.SliderStroke)
        
        local SliderInteract = CreateInstance("TextButton", {
            Name = "Interact",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = "",
            Parent = SliderTrack
        })
        
        local min = config.Min or 0
        local max = config.Max or 100
        local currentValue = config.CurrentValue or min
        local dragging = false
        
        local function UpdateSlider(value, fromDrag)
            currentValue = math.clamp(value or currentValue, min, max)
            local percentage = (currentValue - min) / (max - min)
            
            if config.Increment then
                currentValue = math.floor(currentValue / config.Increment + 0.5) * config.Increment
                currentValue = math.clamp(currentValue, min, max)
                percentage = (currentValue - min) / (max - min)
            end
            
            SliderValue.Text = tostring(currentValue)
            
            if not fromDrag then
                TweenObject(SliderFill, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(percentage, 0, 1, 0)
                })
                TweenObject(SliderButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                    Position = UDim2.new(percentage, -6, 0.5, -6)
                })
            else
                SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                SliderButton.Position = UDim2.new(percentage, -6, 0.5, -6)
            end
            
            if config.Flag then
                SentenceRayfield.Flags[config.Flag] = {CurrentValue = currentValue}
            end
            
            if config.Callback then
                config.Callback(currentValue)
            end
        end
        
        SliderInteract.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                local percentage = math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                local value = min + (max - min) * percentage
                UpdateSlider(value, true)
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local percentage = math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                local value = min + (max - min) * percentage
                UpdateSlider(value, true)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        UpdateSlider(currentValue)
        
        local SliderObject = {
            SetValue = function(value)
                UpdateSlider(value)
            end
        }
        
        return SliderObject
    end
    
    function Tab:CreateInput(config)
        local Input = CreateInstance("Frame", {
            Name = "Input",
            Size = UDim2.new(1, 0, 0, 40),
            BackgroundColor3 = Theme.ElementBackground,
            BorderSizePixel = 0,
            Parent = TabPage
        })
        
        CreateCorner(Input, 4)
        CreateStroke(Input, Theme.ElementStroke)
        
        local InputTitle = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(0.4, 0, 1, 0),
            Position = UDim2.new(0, 15, 0, 0),
            BackgroundTransparency = 1,
            Text = config.Name or "Input",
            TextColor3 = Theme.TextColor,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.Gotham,
            Parent = Input
        })
        
        local InputBox = CreateInstance("TextBox", {
            Name = "InputBox",
            Size = UDim2.new(0.6, -25, 0, 25),
            Position = UDim2.new(0.4, 10, 0.5, -12),
            BackgroundColor3 = Theme.InputBackground,
            BorderSizePixel = 0,
            Text = config.CurrentValue or "",
            PlaceholderText = config.PlaceholderText or "Enter text...",
            TextColor3 = Theme.TextColor,
            PlaceholderColor3 = Theme.PlaceholderColor,
            TextSize = 13,
            Font = Enum.Font.Gotham,
            ClearTextOnFocus = config.RemoveTextAfterFocusLost or false,
            Parent = Input
        })
        
        CreateCorner(InputBox, 4)
        CreateStroke(InputBox, Theme.InputStroke)
        
        InputBox.FocusLost:Connect(function(enterPressed)
            if config.Flag then
                SentenceRayfield.Flags[config.Flag] = {CurrentValue = InputBox.Text}
            end
            
            if config.Callback then
                config.Callback(InputBox.Text)
            end
        end)
        
        local InputObject = {
            SetValue = function(value)
                InputBox.Text = value
                if config.Callback then
                    config.Callback(value)
                end
            end
        }
        
        return InputObject
    end
    
    function Tab:CreateDropdown(config)
        local Dropdown = CreateInstance("Frame", {
            Name = "Dropdown",
            Size = UDim2.new(1, 0, 0, 40),
            BackgroundColor3 = Theme.ElementBackground,
            BorderSizePixel = 0,
            Parent = TabPage
        })
        
        CreateCorner(Dropdown, 4)
        CreateStroke(Dropdown, Theme.ElementStroke)
        
        local DropdownTitle = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(0.4, 0, 1, 0),
            Position = UDim2.new(0, 15, 0, 0),
            BackgroundTransparency = 1,
            Text = config.Name or "Dropdown",
            TextColor3 = Theme.TextColor,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.Gotham,
            Parent = Dropdown
        })
        
        local DropdownButton = CreateInstance("TextButton", {
            Name = "DropdownButton",
            Size = UDim2.new(0.6, -25, 0, 25),
            Position = UDim2.new(0.4, 10, 0.5, -12),
            BackgroundColor3 = Theme.DropdownUnselected,
            BorderSizePixel = 0,
            Text = config.CurrentOption or "Select...",
            TextColor3 = Theme.TextColor,
            TextSize = 13,
            Font = Enum.Font.Gotham,
            Parent = Dropdown
        })
        
        CreateCorner(DropdownButton, 4)
        CreateStroke(DropdownButton, Theme.InputStroke)
        
        local DropdownArrow = CreateInstance("TextLabel", {
            Name = "Arrow",
            Size = UDim2.new(0, 15, 0, 15),
            Position = UDim2.new(1, -20, 0.5, -7),
            BackgroundTransparency = 1,
            Text = "▼",
            TextColor3 = Theme.TextColor,
            TextSize = 12,
            Font = Enum.Font.Gotham,
            Parent = DropdownButton
        })
        
        local DropdownList = CreateInstance("Frame", {
            Name = "DropdownList",
            Size = UDim2.new(1, 0, 0, 0),
            Position = UDim2.new(0, 0, 1, 5),
            BackgroundColor3 = Theme.ElementBackground,
            BorderSizePixel = 0,
            ClipsDescendants = true,
            Visible = false,
            ZIndex = 10,
            Parent = Dropdown
        })
        
        CreateCorner(DropdownList, 4)
        CreateStroke(DropdownList, Theme.ElementStroke)
        CreateListLayout(DropdownList, 0)
        
        local currentOption = config.CurrentOption
        local isOpen = false
        
        local function CreateOption(option)
            local OptionButton = CreateInstance("TextButton", {
                Name = "Option",
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = Theme.DropdownUnselected,
                BackgroundTransparency = option == currentOption and 0 or 1,
                BorderSizePixel = 0,
                Text = option,
                TextColor3 = Theme.TextColor,
                TextSize = 13,
                Font = Enum.Font.Gotham,
                Parent = DropdownList
            })
            
            OptionButton.MouseEnter:Connect(function()
                if option ~= currentOption then
                    TweenObject(OptionButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                        BackgroundTransparency = 0.5
                    })
                end
            end)
            
            OptionButton.MouseLeave:Connect(function()
                if option ~= currentOption then
                    TweenObject(OptionButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                        BackgroundTransparency = 1
                    })
                end
            end)
            
            OptionButton.MouseButton1Click:Connect(function()
                currentOption = option
                DropdownButton.Text = option
                isOpen = false
                
                -- Update all options
                for _, child in pairs(DropdownList:GetChildren()) do
                    if child:IsA("TextButton") then
                        child.BackgroundTransparency = child.Text == option and 0 or 1
                    end
                end
                
                TweenObject(DropdownList, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(1, 0, 0, 0)
                }, function()
                    DropdownList.Visible = false
                end)
                
                TweenObject(DropdownArrow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    Rotation = 0
                })
                
                if config.Flag then
                    SentenceRayfield.Flags[config.Flag] = {CurrentOption = option}
                end
                
                if config.Callback then
                    config.Callback(option)
                end
            end)
        end
        
        for _, option in ipairs(config.Options or {}) do
            CreateOption(option)
        end
        
        DropdownButton.MouseButton1Click:Connect(function()
            isOpen = not isOpen
            
            if isOpen then
                DropdownList.Visible = true
                local listHeight = math.min(#(config.Options or {}) * 30, 150)
                
                TweenObject(DropdownList, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(1, 0, 0, listHeight)
                })
                
                TweenObject(DropdownArrow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    Rotation = 180
                })
            else
                TweenObject(DropdownList, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(1, 0, 0, 0)
                }, function()
                    DropdownList.Visible = false
                end)
                
                TweenObject(DropdownArrow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    Rotation = 0
                })
            end
        end)
        
        local DropdownObject = {
            SetValue = function(value)
                if table.find(config.Options or {}, value) then
                    currentOption = value
                    DropdownButton.Text = value
                    
                    for _, child in pairs(DropdownList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child.BackgroundTransparency = child.Text == value and 0 or 1
                        end
                    end
                    
                    if config.Callback then
                        config.Callback(value)
                    end
                end
            end
        }
        
        return DropdownObject
    end
    
    function Tab:CreateKeybind(config)
        local Keybind = CreateInstance("Frame", {
            Name = "Keybind",
            Size = UDim2.new(1, 0, 0, 40),
            BackgroundColor3 = Theme.ElementBackground,
            BorderSizePixel = 0,
            Parent = TabPage
        })
        
        CreateCorner(Keybind, 4)
        CreateStroke(Keybind, Theme.ElementStroke)
        
        local KeybindTitle = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(0.6, 0, 1, 0),
            Position = UDim2.new(0, 15, 0, 0),
            BackgroundTransparency = 1,
            Text = config.Name or "Keybind",
            TextColor3 = Theme.TextColor,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.Gotham,
            Parent = Keybind
        })
        
        local KeybindButton = CreateInstance("TextButton", {
            Name = "KeybindButton",
            Size = UDim2.new(0.4, -25, 0, 25),
            Position = UDim2.new(0.6, 10, 0.5, -12),
            BackgroundColor3 = Theme.InputBackground,
            BorderSizePixel = 0,
            Text = config.CurrentKeybind or "None",
            TextColor3 = Theme.TextColor,
            TextSize = 13,
            Font = Enum.Font.Gotham,
            Parent = Keybind
        })
        
        CreateCorner(KeybindButton, 4)
        CreateStroke(KeybindButton, Theme.InputStroke)
        
        local currentKeybind = config.CurrentKeybind or "None"
        local listening = false
        
        KeybindButton.MouseButton1Click:Connect(function()
            if listening then return end
            listening = true
            KeybindButton.Text = "..."
            
            local connection
            connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                
                local keycode = input.KeyCode
                if keycode == Enum.KeyCode.Unknown then return end
                
                currentKeybind = keycode.Name
                KeybindButton.Text = currentKeybind
                listening = false
                connection:Disconnect()
                
                if config.Flag then
                    SentenceRayfield.Flags[config.Flag] = {CurrentKeybind = currentKeybind}
                end
                
                if config.Callback then
                    config.Callback(currentKeybind)
                end
            end)
        end)
        
        -- Handle keybind activation
        if config.HoldToInteract == false then
            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if input.KeyCode.Name == currentKeybind and config.Callback then
                    config.Callback(currentKeybind)
                end
            end)
        end
        
        local KeybindObject = {
            SetValue = function(value)
                currentKeybind = value
                KeybindButton.Text = value
                if config.Callback then
                    config.Callback(value)
                end
            end
        }
        
        return KeybindObject
    end
    
    function Tab:CreateLabel(config)
        local Label = CreateInstance("Frame", {
            Name = "Label",
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundTransparency = 1,
            Parent = TabPage
        })
        
        local LabelText = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(1, -30, 1, 0),
            Position = UDim2.new(0, 15, 0, 0),
            BackgroundTransparency = 1,
            Text = config.Text or "Label",
            TextColor3 = Theme.TextColor,
            TextTransparency = 0.3,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true,
            Font = Enum.Font.Gotham,
            Parent = Label
        })
        
        local LabelObject = {
            SetText = function(text)
                LabelText.Text = text
            end
        }
        
        return LabelObject
    end
    
    function Tab:CreateParagraph(config)
        local Paragraph = CreateInstance("Frame", {
            Name = "Paragraph",
            Size = UDim2.new(1, 0, 0, 50),
            BackgroundTransparency = 1,
            Parent = TabPage
        })
        
        local ParagraphTitle = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(1, -30, 0, 20),
            Position = UDim2.new(0, 15, 0, 0),
            BackgroundTransparency = 1,
            Text = config.Title or "Paragraph",
            TextColor3 = Theme.TextColor,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.GothamBold,
            Parent = Paragraph
        })
        
        local ParagraphContent = CreateInstance("TextLabel", {
            Name = "Content",
            Size = UDim2.new(1, -30, 0, 25),
            Position = UDim2.new(0, 15, 0, 22),
            BackgroundTransparency = 1,
            Text = config.Content or "Content",
            TextColor3 = Theme.TextColor,
            TextTransparency = 0.3,
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true,
            Font = Enum.Font.Gotham,
            Parent = Paragraph
        })
        
        local ParagraphObject = {
            SetTitle = function(title)
                ParagraphTitle.Text = title
            end,
            SetContent = function(content)
                ParagraphContent.Text = content
            end
        }
        
        return ParagraphObject
    end
    
    return Tab
end

-- Button Events
HideButton.MouseButton1Click:Connect(function()
    Window:Hide()
end)

MinimizeButton.MouseButton1Click:Connect(function()
    Window:Minimize()
end)

SearchButton.MouseButton1Click:Connect(function()
    if searchOpen then
        -- Close search
        searchOpen = false
        TweenObject(SearchFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            Size = UDim2.new(1, -55, 0, 30),
            BackgroundTransparency = 1
        }, function()
            SearchFrame.Visible = false
        end)
        
        TweenObject(SearchIcon, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {
            ImageTransparency = 1
        })
        
        TweenObject(SearchInput, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {
            TextTransparency = 1
        })
        
        SearchInput:ReleaseFocus()
    else
        -- Open search
        searchOpen = true
        SearchFrame.Visible = true
        
        TweenObject(SearchFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            Size = UDim2.new(1, -35, 0, 35),
            BackgroundTransparency = 0.1
        })
        
        TweenObject(SearchIcon, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            ImageTransparency = 0.5
        })
        
        TweenObject(SearchInput, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            TextTransparency = 0.2
        })
        
        SearchInput:CaptureFocus()
    end
end)

-- Notification System
function SentenceRayfield:Notify(config)
    task.spawn(function()
        local Notification = CreateInstance("Frame", {
            Name = "Notification",
            Size = UDim2.new(1, -30, 0, 70),
            BackgroundColor3 = Theme.Background,
            BorderSizePixel = 0,
            Parent = NotificationsContainer
        })
        
        CreateCorner(Notification, 6)
        CreateStroke(Notification, Theme.ElementStroke)
        
        -- Shadow
        local NotifShadow = CreateInstance("ImageLabel", {
            Name = "Shadow",
            Size = UDim2.new(1, 20, 1, 20),
            Position = UDim2.new(0, -10, 0, -10),
            BackgroundTransparency = 1,
            Image = "rbxassetid://6014261993",
            ImageColor3 = Theme.Shadow,
            ImageTransparency = 0.6,
            ZIndex = 0,
            Parent = Notification
        })
        
        local NotifIcon = CreateInstance("ImageLabel", {
            Name = "Icon",
            Size = UDim2.new(0, 32, 0, 32),
            Position = UDim2.new(0, 15, 0.5, -16),
            BackgroundTransparency = 1,
            Image = config.Image and ("rbxassetid://" .. config.Image) or "",
            ImageColor3 = Theme.TextColor,
            Parent = Notification
        })
        
        local NotifTitle = CreateInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(1, -60, 0, 20),
            Position = UDim2.new(0, 52, 0, 10),
            BackgroundTransparency = 1,
            Text = config.Title or "Notification",
            TextColor3 = Theme.TextColor,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.GothamBold,
            Parent = Notification
        })
        
        local NotifContent = CreateInstance("TextLabel", {
            Name = "Content",
            Size = UDim2.new(1, -60, 0, 30),
            Position = UDim2.new(0, 52, 0, 30),
            BackgroundTransparency = 1,
            Text = config.Content or "Notification content",
            TextColor3 = Theme.TextColor,
            TextTransparency = 0.4,
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true,
            Font = Enum.Font.Gotham,
            Parent = Notification
        })
        
        -- Entrance animation
        Notification.Position = UDim2.new(1, 0, 0, 0)
        Notification.BackgroundTransparency = 1
        NotifTitle.TextTransparency = 1
        NotifContent.TextTransparency = 1
        NotifIcon.ImageTransparency = 1
        NotifShadow.ImageTransparency = 1
        
        TweenObject(Notification, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 0
        })
        
        task.wait(0.1)
        
        TweenObject(NotifShadow, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
            ImageTransparency = 0.6
        })
        
        TweenObject(NotifTitle, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {
            TextTransparency = 0
        })
        
        task.wait(0.05)
        
        TweenObject(NotifIcon, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
            ImageTransparency = 0
        })
        
        TweenObject(NotifContent, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {
            TextTransparency = 0.4
        })
        
        -- Auto-remove
        local duration = config.Duration or 5
        task.wait(duration)
        
        TweenObject(Notification, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {
            Position = UDim2.new(1, 0, 0, 0),
            BackgroundTransparency = 1
        })
        
        TweenObject(NotifTitle, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
            TextTransparency = 1
        })
        
        TweenObject(NotifContent, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
            TextTransparency = 1
        })
        
        TweenObject(NotifIcon, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
            ImageTransparency = 1
        })
        
        TweenObject(NotifShadow, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
            ImageTransparency = 1
        })
        
        task.wait(0.5)
        Notification:Destroy()
    end)
end

-- Library Functions
function SentenceRayfield:CreateWindow(config)
    Title.Text = config.Name or "Sentence Rayfield"
    
    -- Initial animation
    Main.Size = UDim2.new(0, 470, 0, 100)
    Main.BackgroundTransparency = 1
    Shadow.ImageTransparency = 1
    Title.TextTransparency = 1
    
    for _, child in ipairs(Topbar:GetChildren()) do
        if child:IsA("ImageButton") then
            child.ImageTransparency = 1
        end
    end
    
    TweenObject(Main, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {
        BackgroundTransparency = 0
    })
    
    TweenObject(Shadow, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {
        ImageTransparency = 0.4
    })
    
    task.wait(0.1)
    
    TweenObject(Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {
        TextTransparency = 0
    })
    
    for _, child in ipairs(Topbar:GetChildren()) do
        if child:IsA("ImageButton") then
            TweenObject(child, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {
                ImageTransparency = 0.8
            })
        end
    end
    
    task.wait(0.5)
    
    TweenObject(Main, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {
        Size = UDim2.new(0, 500, 0, 475)
    })
    
    return Window
end

function SentenceRayfield:Destroy()
    Window:Destroy()
end

-- Configuration System
function SentenceRayfield:LoadConfiguration()
    -- Implementation for loading saved configurations
    print("Configuration loaded")
end

-- Keybind Toggle (Default: Right Control)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.RightControl then
        if hidden then
            Window:Show()
        else
            Window:Hide()
        end
    end
end)

--[[
Example Usage:

local SentenceRayfield = loadstring(game:HttpGet('YOUR_SCRIPT_URL'))()

local Window = SentenceRayfield:CreateWindow({
    Name = "Sentence Rayfield Example",
    LoadingTitle = "Sentence Rayfield Interface Suite",
    LoadingSubtitle = "by Assistant",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "SentenceRayfield"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false
})

local MainTab = Window:CreateTab({
    Name = "Main",
    Icon = 4483362458
})

MainTab:CreateSection("Main Section")

MainTab:CreateButton({
    Name = "Click Me!",
    Callback = function()
        SentenceRayfield:Notify({
            Title = "Button Clicked",
            Content = "You clicked the button!",
            Duration = 6.5,
            Image = 4483362458
        })
    end,
})

MainTab:CreateToggle({
    Name = "This is a toggle",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        print(Value)
    end,
})

MainTab:CreateSlider({
    Name = "Slider",
    Range = {0, 100},
    Increment = 10,
    Suffix = "Bananas",
    CurrentValue = 10,
    Flag = "Slider1",
    Callback = function(Value)
        print(Value)
    end,
})

local Section = MainTab:CreateSection("Section Example")

MainTab:CreateInput({
    Name = "Input",
    PlaceholderText = "Input Placeholder",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        print(Text)
    end,
})

MainTab:CreateDropdown({
    Name = "Dropdown",
    Options = {"Option 1", "Option 2", "Option 3"},
    CurrentOption = "Option 1",
    Callback = function(Option)
        print(Option)
    end,
})

MainTab:CreateKeybind({
    Name = "Keybind",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind1",
    Callback = function(Keybind)
        print(Keybind)
    end,
})

MainTab:CreateLabel({
    Text = "This is a label!"
})

MainTab:CreateParagraph({
    Title = "Paragraph Example",
    Content = "Paragraph Content"
})

local OtherTab = Window:CreateTab({
    Name = "Other",
    Icon = 4483362458
})

OtherTab:CreateSection("Other Section")

OtherTab:CreateButton({
    Name = "Another Button",
    Callback = function()
        print("Another button clicked!")
    end,
})
]]

return SentenceRayfield
